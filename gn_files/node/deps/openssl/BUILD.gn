# Copyright 2019 the V8 project authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//node/node_files.gni")
import("//node/node.gni")

declare_args() {
  # Defaults for OpenSSL config path.
  if (is_linux) {
    openssl_dir = "/etc/ssl/"
  } else if (is_mac) {
    openssl_dir = "/System/Library/OpenSSL/"
  } else {
    openssl_dir = ""
  }

  # Security level as described in
  # https://www.openssl.org/docs/man1.1.1/man3/SSL_CTX_set_security_level.html
  openssl_seclevel = 1

  openssl_modules_dir = "deps/openssl/lib/openssl-modules"
}

config("openssl_external_config") {
  include_dirs = [
    "openssl/crypto/include",
    "openssl/include",
  ]
}

config("openssl_internal_config") {
  defines = [
    "OPENSSL_USE_NODELETE",
    "L_ENDIAN",
    "OPENSSL_PIC",
    "OPENSSL_NO_ASM",
    "OPENSSLDIR=\"$openssl_dir\"",
    "ENGINESDIR=\"/dev/null\"",
    "OPENSSL_TLS_SECURITY_LEVEL=$openssl_seclevel",
    "MODULESDIR=\"$openssl_modules_dir\"",
    # Compile out hardware engines.  Most are stubs that dynamically load
    # the real driver but that poses a security liability when an attacker
    # is able to create a malicious DLL in one of the default search paths.
    "OPENSSL_NO_HW",
    "OPENSSL_API_COMPAT=0x10100001L",
    "STATIC_LEGACY",
  ]
  if (is_posix) {
    asmflags = [ "-fPIC" ]
    cflags = [ "-fPIC" ]
    ldflags = [ "-fPIC" ]
  }
  include_dirs = [
    "openssl",
    "openssl/crypto/",
    "openssl/crypto/include/",
    "openssl/crypto/include/internal",
    "openssl/crypto/modes/",
    "openssl/crypto/ec/curve448",
    "openssl/crypto/ec/curve448/arch_32",
    "openssl/providers/common/include/",
    "openssl/providers/implementations/include",
    "config/archs/linux-x86_64/no-asm/crypto",
    "config/archs/linux-x86_64/no-asm/providers/common/include",
    "config",
  ]
  if (is_clang || !is_win) {
    cflags_c = [
      "-Wno-constant-conversion",
      "-Wno-implicit-function-declaration",
      "-Wno-sign-compare",
      "-Wno-unused-function",
    ]
  }
  if (is_win) {
    libs = [ "crypt32.lib" ]
  } else if (is_linux) {
    libs = [ "atomic" ]
  }
}

static_library("openssl") {
  configs += [ ":openssl_internal_config" ]
  public_configs = [ ":openssl_external_config" ]
  sources = node_files.openssl_sources
}
